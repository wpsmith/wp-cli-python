url: local.example.com
path: docroot
color: auto
debug: true

user: admin
disabled_commands:
  - db drop
  - plugin install
require:
  - path-to/command.php

ssh:

  staging:
    # The %pseudotty% placeholder gets replaced with -t or -T depending on whether you're piping output
    # The %cmd% placeholder is replaced with the originally-invoked WP-CLI command
    cmd: ssh %pseudotty% util.example.com %cmd%

    # Passed to WP-CLI on the remote server via --url
    url: staging.example.com

    # We cd to this path on the remote server before running WP-CLI
    path: /var/www/staging.example.com/current/docroot

    # Temporary directory to install wp-cli.phar to when it's not available. Default is /tmp
    tmp_directory: /tmp

    # Use a custom php interpreter / wp-cli command on the remote server
    wpcli_command: php ./vendor/bin/wp

    # WP-CLI over SSH will stop if one of these are provided
    disabled_commands:
      - db drop
      - db reset
      - plugin install
      - core multisite-convert

  production:
    # You can connect to a server by tunnelling through another
    cmd: ssh %pseudotty% util.example.org ssh %pseudotty% prod-util.example.org %cmd%

    url: www.example.com
    path: /var/www/staging.example.com/current/docroot
    disabled_commands:
      - db drop
      - db reset
      - plugin install
      - core multisite-convert

  # The keys here are supplied to `wp` via the --ssh-host argument
  vagrant:
    # Note the following command is needed because passing the -t/-T (%pseudotty%)
    # argument doesn't seem to be recognized by vagrant: vagrant ssh -c %cmd% -- %pseudotty%
    cmd: vagrant ssh-config > /tmp/vagrant_ssh_config && ssh -q %pseudotty% -F /tmp/vagrant_ssh_config default %cmd%

    # Location on the vagrant machine where this WordPress install is located
    path: /srv/www/example.com/docroot

# Subcommand defaults (e.g. `wp config create`)
config create:
    dbuser: root
    dbpass:
    extra-php: |
        define( 'WP_DEBUG', true );
        define( 'WP_POST_REVISIONS', 50 );

# Aliases to other WordPress installs (e.g. `wp @staging rewrite flush`)
# An alias can include 'user', 'url', 'path', 'ssh', or 'http'
@staging:
    ssh: wpcli@staging.wp-cli.org
    user: wpcli
    path: /srv/www/staging.wp-cli.org
@production:
    ssh: wpcli@wp-cli.org:2222
    user: wpcli
    path: /srv/www/wp-cli.org

# Aliases can reference other aliases to create alias groups
# Alias groups can be nested
@both:
 -@staging
 - @production

# '_' is a special value denoting configuration options for this wp-cli.sample.yml
_:
    # Merge subcommand defaults from the upstream config.yml, instead of overriding
    merge: true
    # Inherit configuration from an arbitrary YAML file
    inherit: prod.yml
